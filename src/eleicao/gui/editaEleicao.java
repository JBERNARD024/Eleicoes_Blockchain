/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package eleicao.gui;

import com.github.lgooddatepicker.components.DatePicker;
import com.github.lgooddatepicker.components.DateTimePicker;
import eleicao.utils.Recursos;
import java.awt.Color;
import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author joaob
 */
public class editaEleicao extends javax.swing.JDialog {
    String nome;
    LocalDate dataInic;
    LocalDate dataFim;
    LocalTime horaInic;
    LocalTime horaFim;
    String descricao;
    menuInicial menu;
    ImageIcon icon;
    byte[] byteIcon;
    File f;

    /**
     * Creates new form menuInfos
     */
    public editaEleicao(JDialog parent, menuInicial menu, boolean model) {
        super(parent, model);
        this.menu = menu;
        initComponents();
        txtNome.setText(menu.eleicao.getNome());
        dataPickerInic.datePicker.setDate(menu.eleicao.getDataInic());
        dataPickerInic.timePicker.setTime(menu.eleicao.getHoraInic());
        dataPickerFim.datePicker.setDate(menu.eleicao.getDataFim());
        dataPickerFim.timePicker.setTime(menu.eleicao.getHoraFim());
        txtDescricao.setText(menu.eleicao.getDescricao());
        icon = new ImageIcon(menu.eleicao.getImagem());
        Image imagem = icon.getImage().getScaledInstance(btnFoto.getWidth(), btnFoto.getHeight(), Image.SCALE_SMOOTH);
        btnFoto.setBackground(Color.white);
        btnFoto.setBackground(Color.white);
        btnFoto.setIcon(new ImageIcon(imagem));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        labelNome = new javax.swing.JLabel();
        txtNome = new javax.swing.JTextField();
        labelDataInic = new javax.swing.JLabel();
        labelDataFim = new javax.swing.JLabel();
        dataPickerInic = new com.github.lgooddatepicker.components.DateTimePicker();
        dataPickerFim = new com.github.lgooddatepicker.components.DateTimePicker();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDescricao = new javax.swing.JTextArea();
        btnFoto = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnSair = new javax.swing.JButton();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Informações");
        setMinimumSize(new java.awt.Dimension(625, 250));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        labelNome.setText("Nome:");
        labelNome.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        labelNome.setMaximumSize(new java.awt.Dimension(40, 25));
        labelNome.setMinimumSize(new java.awt.Dimension(40, 25));
        labelNome.setPreferredSize(new java.awt.Dimension(40, 20));
        getContentPane().add(labelNome, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 60, 30));
        getContentPane().add(txtNome, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 20, 320, 30));

        labelDataInic.setText("Data Início:");
        labelDataInic.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        labelDataInic.setMaximumSize(new java.awt.Dimension(40, 25));
        labelDataInic.setMinimumSize(new java.awt.Dimension(40, 25));
        labelDataInic.setPreferredSize(new java.awt.Dimension(40, 20));
        getContentPane().add(labelDataInic, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 60, 30));

        labelDataFim.setText("Data Fim:");
        labelDataFim.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        labelDataFim.setMaximumSize(new java.awt.Dimension(40, 25));
        labelDataFim.setMinimumSize(new java.awt.Dimension(40, 25));
        labelDataFim.setPreferredSize(new java.awt.Dimension(40, 20));
        getContentPane().add(labelDataFim, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 60, 30));
        getContentPane().add(dataPickerInic, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 60, 320, 30));
        getContentPane().add(dataPickerFim, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 110, 320, 30));

        jLabel2.setText("Descrição:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, 60, 50));

        txtDescricao.setColumns(20);
        txtDescricao.setRows(5);
        jScrollPane1.setViewportView(txtDescricao);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 150, 320, 50));

        btnFoto.setText("Foto");
        btnFoto.setMinimumSize(new java.awt.Dimension(125, 125));
        btnFoto.setPreferredSize(new java.awt.Dimension(125, 125));
        btnFoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFotoActionPerformed(evt);
            }
        });
        getContentPane().add(btnFoto, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 10, 150, 150));

        btnEditar.setText("Guardar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });
        getContentPane().add(btnEditar, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 180, -1, 30));

        btnSair.setText("Sair");
        btnSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSairActionPerformed(evt);
            }
        });
        getContentPane().add(btnSair, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 180, -1, 30));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnFotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFotoActionPerformed
        JFileChooser escolheFoto = new JFileChooser("../Eleicao_Blockchain_Teste/img/fotosEleicao");
        if (escolheFoto.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                File fich = escolheFoto.getSelectedFile();
                String caminhoImag = fich.getAbsolutePath();
                icon = new ImageIcon(caminhoImag);
                Image imagem = icon.getImage().getScaledInstance(btnFoto.getWidth(), btnFoto.getHeight(), Image.SCALE_SMOOTH);
                btnFoto.setIcon(new ImageIcon(imagem));
                Recursos.iconToByteArray(icon);
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Ficheiro não Encontrado");
        }
    }//GEN-LAST:event_btnFotoActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        editarEleicao();
    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSairActionPerformed
        // TODO add your handling code here:
        this.dispose();
        new menuEleitor(this, menu, true).setVisible(true);
    }//GEN-LAST:event_btnSairActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnFoto;
    private javax.swing.JButton btnSair;
    private com.github.lgooddatepicker.components.DateTimePicker dataPickerFim;
    private com.github.lgooddatepicker.components.DateTimePicker dataPickerInic;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelDataFim;
    private javax.swing.JLabel labelDataInic;
    private javax.swing.JLabel labelNome;
    private javax.swing.JTextArea txtDescricao;
    private javax.swing.JTextField txtNome;
    // End of variables declaration//GEN-END:variables

    private boolean verificaCampo(){
        if (nome.equals("") || dataInic == null || dataFim == null) {
            JOptionPane.showConfirmDialog(null, "Um ou mais campos obrigatórios estão vazios", "Campos Vazios", 2);
            return false;
        } else {
            return true;
        }
    }
    
    private void editarEleicao() {
        nome = txtNome.getText();
        dataInic = dataPickerInic.datePicker.getDate();
        horaInic = dataPickerInic.timePicker.getTime();
        dataFim = dataPickerFim.datePicker.getDate();
        horaFim = dataPickerFim.timePicker.getTime();
        descricao = txtDescricao.getText();
        try {
            byteIcon = Recursos.iconToByteArray(icon);
        } catch (IOException ex) {
            Logger.getLogger(editaEleitor.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(verificaCampo() == true){
            menu.eleicao.setNome(nome);
            menu.eleicao.setDataInic(dataInic);
            menu.eleicao.setHoraInic(horaInic);
            menu.eleicao.setDataFim(dataFim);
            menu.eleicao.setHoraFim(horaFim);
            menu.eleicao.setDescricao(descricao);
            menu.eleicao.setImagem(byteIcon);
            this.dispose();
            new menuInfos(this, menu, true).setVisible(true);
        }
    }
}
